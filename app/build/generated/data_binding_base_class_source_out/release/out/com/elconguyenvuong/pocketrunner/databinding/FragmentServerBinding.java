// Generated by view binder compiler. Do not edit!
package com.elconguyenvuong.pocketrunner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.elconguyenvuong.pocketrunner.R;
import com.github.mikephil.charting.charts.LineChart;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentServerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView basedOn;

  @NonNull
  public final LineChart chartProcessor;

  @NonNull
  public final LinearLayout content;

  @NonNull
  public final TextView ip;

  @NonNull
  public final TextView ipLabel;

  @NonNull
  public final TextView pharService;

  @NonNull
  public final MaterialButton start;

  @NonNull
  public final MaterialButton stop;

  private FragmentServerBinding(@NonNull LinearLayout rootView, @NonNull TextView basedOn,
      @NonNull LineChart chartProcessor, @NonNull LinearLayout content, @NonNull TextView ip,
      @NonNull TextView ipLabel, @NonNull TextView pharService, @NonNull MaterialButton start,
      @NonNull MaterialButton stop) {
    this.rootView = rootView;
    this.basedOn = basedOn;
    this.chartProcessor = chartProcessor;
    this.content = content;
    this.ip = ip;
    this.ipLabel = ipLabel;
    this.pharService = pharService;
    this.start = start;
    this.stop = stop;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentServerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentServerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_server, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentServerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.basedOn;
      TextView basedOn = ViewBindings.findChildViewById(rootView, id);
      if (basedOn == null) {
        break missingId;
      }

      id = R.id.chart_processor;
      LineChart chartProcessor = ViewBindings.findChildViewById(rootView, id);
      if (chartProcessor == null) {
        break missingId;
      }

      LinearLayout content = (LinearLayout) rootView;

      id = R.id.ip;
      TextView ip = ViewBindings.findChildViewById(rootView, id);
      if (ip == null) {
        break missingId;
      }

      id = R.id.ip_label;
      TextView ipLabel = ViewBindings.findChildViewById(rootView, id);
      if (ipLabel == null) {
        break missingId;
      }

      id = R.id.pharService;
      TextView pharService = ViewBindings.findChildViewById(rootView, id);
      if (pharService == null) {
        break missingId;
      }

      id = R.id.start;
      MaterialButton start = ViewBindings.findChildViewById(rootView, id);
      if (start == null) {
        break missingId;
      }

      id = R.id.stop;
      MaterialButton stop = ViewBindings.findChildViewById(rootView, id);
      if (stop == null) {
        break missingId;
      }

      return new FragmentServerBinding((LinearLayout) rootView, basedOn, chartProcessor, content,
          ip, ipLabel, pharService, start, stop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
