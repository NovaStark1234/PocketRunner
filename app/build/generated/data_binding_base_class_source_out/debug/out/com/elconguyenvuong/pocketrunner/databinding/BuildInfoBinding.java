// Generated by view binder compiler. Do not edit!
package com.elconguyenvuong.pocketrunner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.elconguyenvuong.pocketrunner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BuildInfoBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView api;

  @NonNull
  public final TextView branch;

  @NonNull
  public final TextView buildNumber;

  @NonNull
  public final TextView developmentBuild;

  @NonNull
  public final TextView gameVersion;

  private BuildInfoBinding(@NonNull RelativeLayout rootView, @NonNull TextView api,
      @NonNull TextView branch, @NonNull TextView buildNumber, @NonNull TextView developmentBuild,
      @NonNull TextView gameVersion) {
    this.rootView = rootView;
    this.api = api;
    this.branch = branch;
    this.buildNumber = buildNumber;
    this.developmentBuild = developmentBuild;
    this.gameVersion = gameVersion;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BuildInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BuildInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.build_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BuildInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.api;
      TextView api = ViewBindings.findChildViewById(rootView, id);
      if (api == null) {
        break missingId;
      }

      id = R.id.branch;
      TextView branch = ViewBindings.findChildViewById(rootView, id);
      if (branch == null) {
        break missingId;
      }

      id = R.id.build_number;
      TextView buildNumber = ViewBindings.findChildViewById(rootView, id);
      if (buildNumber == null) {
        break missingId;
      }

      id = R.id.development_build;
      TextView developmentBuild = ViewBindings.findChildViewById(rootView, id);
      if (developmentBuild == null) {
        break missingId;
      }

      id = R.id.game_version;
      TextView gameVersion = ViewBindings.findChildViewById(rootView, id);
      if (gameVersion == null) {
        break missingId;
      }

      return new BuildInfoBinding((RelativeLayout) rootView, api, branch, buildNumber,
          developmentBuild, gameVersion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
